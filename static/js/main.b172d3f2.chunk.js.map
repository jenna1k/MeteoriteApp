{"version":3,"sources":["SearchBox.js","Header.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","onSearchChange","onSearchClick","react_default","a","createElement","type","placeholder","onChange","onClick","Header","searchfield","className","src_SearchBox_0","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","target","value","typed","searchresult","state","data","filter","elem","name","toLowerCase","includes","bind","assertThisInitialized","_this2","fetch","then","response","json","src_Header","map","key","id","nametype","recclass","mass","fall","year","reclat","reclong","Component","App","src_Home_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b172d3f2.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBox.css'\n\nconst SearchBox = ({ onSearchChange, onSearchClick }) => {\n    return (\n        <div>\n            <input type=\"search\" placeholder=\"Enter search terms\" onChange={onSearchChange} />\n            <button onClick={onSearchClick}>search</button>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\nimport SearchBox from './SearchBox';\nimport './Header.css'\n\nfunction Header({ searchfield, onSearchChange, onSearchClick }) {\n  return (\n    <div className=\"header\">\n      <div className=\"title\">\n        <h1>Meteorite Explorer</h1>\n      </div>\n      <div className=\"search\">\n        <SearchBox searchfield={searchfield} onSearchChange={onSearchChange} onSearchClick={onSearchClick}/>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport './Home.css'\n\nclass Home extends Component {\n  constructor() {\n    super();\n    this.state= {\n      data: [],\n      searchfield: '',\n      searchresult: [],\n      typed: false,\n    }\n\n  this.onSearchChange = this.onSearchChange.bind(this);\n  this.onSearchClick = this.onSearchClick.bind(this);\n  }\n\n  onSearchChange = (e) => {\n    this.setState({ searchfield: e.target.value, typed: true})\n  }\n\n  onSearchClick = (e) => {\n    this.setState({ searchresult: this.state.data\n      .filter(elem => {\n        return elem.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n      })\n    })\n  }\n\n  componentDidMount(){\n    fetch('https://data.nasa.gov/resource/gh4g-9sfh.json')\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        data: data\n      })\n    })\n  }\n\n\n  render(){\n      return (\n        <div>\n          <Header searchfield={this.state.searchfield} onSearchChange={this.onSearchChange} onSearchClick={this.onSearchClick} />\n          <table>\n            <tbody>\n              <tr>\n                <th>Name</th>\n                <th>Id</th> \n                <th>Name Type</th>\n                <th>Rec Class</th>\n                <th>Mass (g)</th>\n                <th>Fall</th>\n                <th>Year</th>\n                <th>Latitude</th>\n                <th>Longitude</th>\n              </tr>\n            </tbody>\n\n            <tbody>\n            {this.state.typed ? this.state.searchresult.map((elem, key)=>(\n                <tr>\n                  <td>{elem.name}</td>\n                  <td>{elem.id}</td> \n                  <td>{elem.nametype}</td>\n                  <td>{elem.recclass}</td>\n                  <td>{elem.mass}</td>\n                  <td>{elem.fall}</td>\n                  <td>{elem.year}</td>\n                  <td>{elem.reclat}</td>\n                  <td>{elem.reclong}</td>\n                </tr>\n            )) : this.state.data.map((elem, key)=>(\n                <tr>\n                  <td>{elem.name}</td>\n                  <td>{elem.id}</td> \n                  <td>{elem.nametype}</td>\n                  <td>{elem.recclass}</td>\n                  <td>{elem.mass}</td>\n                  <td>{elem.fall}</td>\n                  <td>{elem.year}</td>\n                  <td>{elem.reclat}</td>\n                  <td>{elem.reclong}</td>\n                </tr>\n            ))}\n            </tbody>\n          </table>\n        </div>\n      );\n  }\n\n}\n\nexport default Home;","import React from 'react';\nimport Home from './Home';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}